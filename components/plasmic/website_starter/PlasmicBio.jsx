// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x3xc855ARAT9pieN1px2uC
// Component: EPli79ZD6mx9
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useCurrentUser
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x3xc855ARAT9pieN1px2uC/projectcss
import sty from "./PlasmicBio.module.css"; // plasmic-import: EPli79ZD6mx9/css

createPlasmicElementProxy;

export const PlasmicBio__VariantProps = new Array();

export const PlasmicBio__ArgProps = new Array("info");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBio__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__tcDg6)}>
        <div className={classNames(projectcss.all, sty.freeBox__eb38L)}>
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"250px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"auto"}
            displayWidth={"250px"}
            loading={"lazy"}
            src={{
              src: "/plasmic/website_starter/images/moulikSharmajpeg.jpg",
              fullWidth: 720,
              fullHeight: 883,
              aspectRatio: undefined
            }}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___2Quw1
            )}
          >
            {"Hi! My name is Moulik Sharma"}
          </div>
          <PlasmicLink__
            data-plasmic-name={
              "httpsdrivegooglecomfiled1QCp0AXenWxZNdLz0Txbvmme2N9A8WmgHviewuspdriveLink"
            }
            data-plasmic-override={
              overrides.httpsdrivegooglecomfiled1QCp0AXenWxZNdLz0Txbvmme2N9A8WmgHviewuspdriveLink
            }
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.httpsdrivegooglecomfiled1QCp0AXenWxZNdLz0Txbvmme2N9A8WmgHviewuspdriveLink
            )}
            component={Link}
            href={"https://www.plasmic.app/"}
            platform={"nextjs"}
          >
            {"Resume"}
          </PlasmicLink__>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox___0EuFg)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__mCfn
            )}
          >
            {"About me"}
          </div>
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__t9Ql
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return "School " + $props.info.School;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "School: Leaders Private School, Sharjah";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__d4Xbh
              )}
            >
              {"College: National Institute Of Technology, Delhi"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nEZn
              )}
            >
              {"Course: Bachelors Of Technology in Computer Science\n"}
            </div>
          </section>
        </div>
      </div>
    </section>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "img",
    "httpsdrivegooglecomfiled1QCp0AXenWxZNdLz0Txbvmme2N9A8WmgHviewuspdriveLink",
    "section"
  ],

  img: ["img"],
  httpsdrivegooglecomfiled1QCp0AXenWxZNdLz0Txbvmme2N9A8WmgHviewuspdriveLink: [
    "httpsdrivegooglecomfiled1QCp0AXenWxZNdLz0Txbvmme2N9A8WmgHviewuspdriveLink"
  ],

  section: ["section"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBio__ArgProps,
          internalVariantPropNames: PlasmicBio__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBio__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBio";
  } else {
    func.displayName = `PlasmicBio.${nodeName}`;
  }
  return func;
}

export const PlasmicBio = Object.assign(
  // Top-level PlasmicBio renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    httpsdrivegooglecomfiled1QCp0AXenWxZNdLz0Txbvmme2N9A8WmgHviewuspdriveLink:
      makeNodeComponent(
        "httpsdrivegooglecomfiled1QCp0AXenWxZNdLz0Txbvmme2N9A8WmgHviewuspdriveLink"
      ),
    section: makeNodeComponent("section"),
    // Metadata about props expected for PlasmicBio
    internalVariantProps: PlasmicBio__VariantProps,
    internalArgProps: PlasmicBio__ArgProps
  }
);

export default PlasmicBio;
/* prettier-ignore-end */
